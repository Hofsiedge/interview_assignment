networks:
  db:
    name: 'interview_db'

services:
  api:
    container_name: interview_api
    depends_on:
      - db
    environment:
      COIN_GECKO_TOKEN: ${COIN_GECKO_TOKEN:?}
      POLLING_INTERVAL: ${POLLING_INTERVAL:?}
      POSTGRES_URL: "postgres://${DB_USERNAME}:${DB_PASSWORD}@interview_db:5432/${DB_DATABASE}?sslmode=disable"
    image: interview-test:latest
    networks:
      - db
    ports:
      - 8000:80
    restart: unless-stopped

  db:
    container_name: interview_db
    environment:
      PGDATA: '/var/lib/postgresql/data/pgdata'
      PGPASSWORD: "${DB_PASSWORD:?}"
      POSTGRES_DB: "${DB_DATABASE:?}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:?}"
      POSTGRES_USER: "${DB_USERNAME:?}"
      TZ: "Europe/Moscow"
    healthcheck:
      retries: 2
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
      timeout: 1s
    image: postgres:17
    networks:
      - db
    ports:
      - 5432:5432
    restart: always
    volumes:
      - 'db:/var/lib/postgresql/data'

  migrate:
    depends_on:
      - db
    entrypoint:
      - sh
      - -c
      - >
        sh /wait-for.sh interview_db:5432 --timeout=30 --
        migrate -path /migrations
        -database "postgres://${DB_USERNAME}:${DB_PASSWORD}@interview_db:5432/${DB_DATABASE}?sslmode=disable"
        up
    image: migrate/migrate
    networks:
      - db
    volumes:
      - ./migrations:/migrations
      - ./scripts/wait-for.sh:/wait-for.sh

volumes:
  db:
    name: 'interview_db'
